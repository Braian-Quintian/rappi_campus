use('db_rappi_campus');
db.createCollection("clientes", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["cli_dni", "cli_primerNombre", "cli_primerApellido", "cli_telefono", "cli_email", "cli_fecha_nac", "cli_genero"],
            additionalProperties: true,
            properties: {
                cli_dni: { bsonType: "int", description: "Dni debe ser un entero y es requerido" },
                cli_primerNombre: { bsonType: "string", description: "Nombre debe ser un string y es requerido", pattern: "^[A-Za-z ]+$" },
                cli_segundoNombre: { bsonType: "string", description: "Segundo nombre debe ser un string", pattern: "^[A-Za-z ]+$" },
                cli_primerApellido: { bsonType: "string", description: "Apellido debe ser un string y es requerido", pattern: "^[A-Za-z ]+$" },
                cli_segundoApellido: { bsonType: "string", description: "Segundo apellido debe ser un string", pattern: "^[A-Za-z ]+$" },
                cli_telefono: { bsonType: "string", description: "Telefono solo puede contener numeros y es requerido", pattern: "^[0-9]+$" },
                cli_email: { bsonType: "string", description: "Correo electronico debe ser una direccion de correo valido y es requerido" },
                cli_password: { bsonType: "string", description: "Contraseña debe ser un string y es requerido" },
                cli_fecha_nac: { bsonType: "date", description: "Fecha de nacimiento debe ser una fecha valida y es requerida" },
                cli_genero: { enum: ['Masculino', 'Femenino', 'Otro'], description: "Genero solo puede ser Masculino, Femenino o Prefiero no decirlo" }
            }
        }
    }
});

use('db_rappi_campus');
db.createCollection("repartidores", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["rep_dni", "rep_primerNombre", "rep_primerApellido", "rep_telefono", "rep_email", "rep_fecha_nac", "rep_genero", "rep_codigo_vehiculo", "rep_permisos"],
            additionalProperties: true,
            properties: {
                rep_dni: { bsonType: "int", description: "Dni debe ser un entero y es requerido" },
                rep_primerNombre: { bsonType: "string", description: "Nombre debe ser un string y es requerido", pattern: "^[A-Za-z ]+$" },
                rep_segundoNombre: { bsonType: "string", description: "Segundo nombre debe ser un string", pattern: "^[A-Za-z ]+$" },
                rep_primerApellido: { bsonType: "string", description: "Apellido debe ser un string y es requerido", pattern: "^[A-Za-z ]+$" },
                rep_segundoApellido: { bsonType: "string", description: "Segundo apellido debe ser un string", pattern: "^[A-Za-z ]+$" },
                rep_telefono: { bsonType: "string", description: "Telefono solo puede contener numeros y es requerido", pattern: "^[0-9]+$" },
                rep_email: { bsonType: "string", description: "Correo electronico debe ser una direccion de correo valido y es requerido" },
                rep_password: { bsonType: "string", description: "Contraseña debe ser un string y es requerido" },
                rep_estado: { enum: ['Activo', 'Inactivo'], description: "Estado solo puede ser Activo o Inactivo" },
                rep_fecha_nac: { bsonType: "date", description: "Fecha de nacimiento debe ser una fecha valida y es requerida" },
                rep_genero: { enum: ['Masculino', 'Femenino', 'Otro'], description: "Genero solo puede ser Masculino, Femenino o Prefiero no decirlo" },
                rep_codigo_vehiculo: { bsonType: "objectId" },
                rep_permisos: {
                    bsonType: 'object',
                    description: "Ingrese los permisos",
                    required: ["/repartidores"],
                    additionalProperties: {
                        bsonType: "array",
                        description: "Ingrese la version autorizada",
                    }
                }

            }
        }
    }
});

use('db_rappi_campus')
db.repartidores.insertOne({
    rep_dni: 123456789,
    rep_primerNombre: "Juan",
    rep_primerApellido: "Perez",
    rep_telefono: "123456789",
    rep_email: "bquintianromero@gmail.com",
    rep_password: "$2b$10$No0.DYQe8AOQ/BCrU4RWYu8LqGcw/ktXozaVhM3kFjtzVDZlqnEvC",
    rep_estado: "Activo",
    rep_fecha_nac: new Date("1999-01-01"),
    rep_genero: "Masculino",
    rep_codigo_vehiculo: 123456789,
    rep_permisos: {
        "/repartidores": ["*"]
    }
})

use('db_rappi_campus');
db.createCollection("vehiculos", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["veh_marca", "veh_modelo", "veh_placa", "veh_color", "veh_tipo"],
            additionalProperties: true,
            properties: {
                veh_marca: { bsonType: "string", description: "Marca debe ser un string y es requerido", pattern: "^[A-Za-z ]+$" },
                veh_modelo: { bsonType: "string", description: "Modelo debe ser un string y es requerido", pattern: "^[A-Za-z0-9 ]+$" },
                veh_placa: { bsonType: "string", description: "Placa debe ser un string y es requerido", pattern: "^[A-Za-z0-9 ]+$" },
                veh_color: { bsonType: "string", description: "Color debe ser un string y es requerido", pattern: "^[A-Za-z ]+$" },
                veh_tipo: { enum: ['Motos', 'Carros', 'Bicicletas', 'otro'], description: "Tipo solo puede ser Motocicleta o Bicicleta" }
            }
        }
    }
});

use('db_rappi_campus');
db.createCollection("restaurante", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["res_nit", "res_nombre", "res_direccion", "res_telefono", "res_categoria"],
            additionalProperties: true,
            properties: {
                res_nit: { bsonType: "int", description: "El NIT debe ser un entero y es requerido" },
                res_nombre: { bsonType: "string", description: "El nombre del restaurante debe ser un string y es requerido" },
                res_direccion: { bsonType: "string", description: "La direccion del restaurante debe ser un string y es requerido" },
                res_telefono: { bsonType: "string", description: "El telefono solo puede contener números y es requerido", pattern: "^[0-9]+$" },
                res_categoria: { enum: ['tematico', 'FastFood', 'buffet', 'gourmet', 'familiar'], description: "Esa categoria no está disponible" }
            }
        }
    }
});

use('db_rappi_campus');
db.createCollection("productos", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["pro_id", "pro_nombre", "pro_precio", "pro_descripcion", "pro_categoria", "pro_restaurante"],
            additionalProperties: true,
            properties: {
                pro_id: { bsonType: "int", description: "El id del producto debe ser un entero y es requerido" },
                pro_nombre: { bsonType: "string", description: "El nombre del producto debe ser un string y es requerido" },
                pro_precio: { bsonType: "int", description: "El precio del producto debe ser un entero y es requerido" },
                pro_descripcion: { bsonType: "string", description: "La descripcion del producto debe ser un string y es requerido" },
                pro_categoria: { enum: ['bebida', 'comida', 'postre'], description: "Esa categoria no está disponible" },
                pro_restaurante: { bsonType: "int", description: "El restaurante al que pertenece debe ser un entero y es requerido" },
                pro_imagen: { bsonType: "string", description: "La imagen del producto debe ser un string" }
            }
        }
    }
});

use('db_rappi_campus');
db.createCollection("empleados", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["emp_dni", "emp_primerNombre", "emp_primerApellido", "emp_telefono", "emp_email", "emp_fecha_nac", "emp_genero", "emp_tipo"],
            additionalProperties: true,
            properties: {
                emp_dni: { bsonType: "int", description: "Dni debe ser un entero y es requerido" },
                emp_primerNombre: { bsonType: "string", description: "Nombre debe ser un string y es requerido", pattern: "^[A-Za-z ]+$" },
                emp_segundoNombre: { bsonType: "string", description: "Segundo nombre debe ser un string", pattern: "^[A-Za-z ]+$" },
                emp_primerApellido: { bsonType: "string", description: "Apellido debe ser un string y es requerido", pattern: "^[A-Za-z ]+$" },
                emp_segundoApellido: { bsonType: "string", description: "Segundo apellido debe ser un string", pattern: "^[A-Za-z ]+$" },
                emp_telefono: { bsonType: "string", description: "Telefono solo puede contener numeros y es requerido", pattern: "^[0-9]+$" },
                emp_email: { bsonType: "string", description: "Correo electronico debe ser una direccion de correo valido y es requerido" },
                emp_password: { bsonType: "string", description: "Contraseña debe ser un string y es requerido" },
                emp_fecha_nac: { bsonType: "date", description: "Fecha de nacimiento debe ser una fecha valida y es requerida" },
                emp_genero: { enum: ['Masculino', 'Femenino', 'Otro'], description: "Genero solo puede ser Masculino, Femenino o Prefiero no decirlo" },
                emp_tipo: { enum: ['Vdo', 'Grte', 'Admin'], description: "Tipo de empleado solo puede ser vendedor o gerente" }
            }
        }
    }
});

use('db_rappi_campus');
db.createCollection("pedidos", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["ped_id", "ped_cliente", "ped_restaurante", "ped_estado", "ped_fecha", "ped_hora", "ped_direccion", "ped_repartidor"],
            additionalProperties: true,
            properties: {
                ped_id: { bsonType: "int", description: "El id del pedido debe ser un entero y es requerido" },
                ped_cliente: { bsonType: "int", description: "El cliente debe ser un entero y es requerido" },
                ped_restaurante: { bsonType: "int", description: "El restaurante debe ser un entero y es requerido" },
                ped_estado: { enum: ['En proceso', 'En camino', 'Entregado'], description: "El estado solo puede ser En proceso, En camino o Entregado" },
                ped_fecha: { bsonType: "date", description: "La fecha debe ser una fecha valida y es requerida" },
                ped_hora: { bsonType: "string", description: "La hora debe ser un string y es requerida", pattern: "^[0-9]+$" },
                ped_direccion: { bsonType: "string", description: "La direccion debe ser un string y es requerida" },
                ped_repartidor: { bsonType: "int", description: "El repartidor debe ser un entero y es requerido" },
                ped_pago: { enum: ['Efectivo', 'Tarjeta'], description: "El pago solo puede ser Efectivo o Tarjeta" }
            }
        }
    }
});

use('db_rappi_campus');
db.createCollection("detalle_pedidos", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["det_ped_id", "det_ped_pedido", "det_ped_producto", "det_ped_cantidad"],
            additionalProperties: true,
            properties: {
                det_ped_id: { bsonType: "int", description: "El id del detalle del pedido debe ser un entero y es requerido" },
                det_ped_pedido: { bsonType: "int", description: "El pedido debe ser un entero y es requerido" },
                det_ped_producto: { bsonType: "int", description: "El producto debe ser un entero y es requerido" },
                det_ped_cantidad: { bsonType: "int", description: "La cantidad debe ser un entero y es requerido" }
            }
        }
    }
});